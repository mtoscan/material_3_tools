import 'package:flutter/material.dart';

import '../interaction_states.dart';

/// A helper class that allows creating Material 3 [ButtonStyle] without
/// providing [BuildContext] for accessing [ColorScheme] via
/// `Theme.of(context).colorScheme` while also reusing private values from
/// [TextButton]'s `_TokenDefaultsM3`.
///
///
/// [M3TextButtonStyle] is best suited for situations when your app has custom
/// design which is not compatible with Material 3 color system (ex. color
/// scheme generated by [ColorScheme.fromSeed] generates colors that are too
/// different from your own design system) but you still want to use Material 3
/// [TextButton] design.
///
/// While more verbose than [TextButton.styleFrom] it allows much more easily
/// create const [ButtonStyle].
///
/// See also:
///
/// * [TextButton.styleFrom], a static convenience method that constructs a
/// text button [ButtonStyle] given simple values.
/// * Text button Material 3 specs:
/// <https://m3.material.io/components/buttons/specs#899b9107-0127-4a01-8f4c-87f19323a1b4>
/// * Text button Material 3 guidelines:
/// <https://m3.material.io/components/buttons/guidelines#c9bcbc0b-ee05-45ad-8e80-e814ae919fbb>
/// * Material 3 buttons accessibility:
/// <https://m3.material.io/components/buttons/accessibility>
@immutable
class M3TextButtonStyle extends ButtonStyle {
  /// Creates [ButtonStyle] for [TextButton] with const constructor.
  ///
  /// Both [foregroundColor] and [overlayColor] should use
  /// [ColorScheme.primary] value.
  const M3TextButtonStyle({
    ForegroundStateOverlay? foregroundColor,
    InteractionStatesOverlay? overlayColor,
    BackgroundStateOverlay? backgroundColor,
    OutlinedBorder? shape,
    TextStyle? textStyle,
    EdgeInsetsGeometry? padding = layoutPadding,
    Size? minimumSize = const Size(64, 40),
    super.mouseCursor,
    super.visualDensity,
    super.tapTargetSize,
    super.splashFactory = InkSparkle.splashFactory,
  })  : _shape = shape,
        _textStyle = textStyle,
        _padding = padding,
        _minimumSize = minimumSize,
        super(
          animationDuration: kThemeChangeDuration,
          enableFeedback: true,
          elevation: const MaterialStatePropertyAll(0),
          alignment: Alignment.center,
          overlayColor: overlayColor,
          foregroundColor: foregroundColor,
          maximumSize: const MaterialStatePropertyAll(Size.infinite),
          backgroundColor: backgroundColor,
        );

  /// Padding values for [TextButton] taken from
  /// <https://m3.material.io/components/buttons/specs#bff80ee9-28fb-41a0-a671-0ab29ffc04d5>
  ///
  /// `_TokenDefaultsM3` does not have correct values.
  static const EdgeInsets layoutPadding = EdgeInsets.symmetric(horizontal: 12);

  /// Padding values for [TextButton.icon] taken from
  /// <https://m3.material.io/components/buttons/specs#bff80ee9-28fb-41a0-a671-0ab29ffc04d5>
  ///
  /// `_TokenDefaultsM3` does not have correct values.
  static const EdgeInsets iconLayoutPadding =
      EdgeInsets.only(left: 12, right: 16);

  // Private fields for creating [ButtonStyleButton.allOrNull].
  final OutlinedBorder? _shape;
  final TextStyle? _textStyle;
  final EdgeInsetsGeometry? _padding;
  final Size? _minimumSize;

  @override
  MaterialStateProperty<OutlinedBorder>? get shape =>
      ButtonStyleButton.allOrNull(_shape);

  @override
  MaterialStateProperty<TextStyle>? get textStyle =>
      ButtonStyleButton.allOrNull(_textStyle);

  @override
  MaterialStateProperty<EdgeInsetsGeometry>? get padding =>
      ButtonStyleButton.allOrNull(_padding);

  @override
  MaterialStateProperty<Size?>? get minimumSize =>
      ButtonStyleButton.allOrNull(_minimumSize);
}
