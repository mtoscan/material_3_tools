import 'package:flutter/material.dart';

import '../interaction_states.dart';

/// A helper class that allows creating Material 3 [ButtonStyle] without
/// providing [BuildContext] for accessing [ColorScheme] via
/// `Theme.of(context).colorScheme` while also reusing private values from
/// [OutlinedButton]'s `_TokenDefaultsM3`.
///
///
/// [M3OutlinedButtonStyle] is best suited for situations when your app has
/// custom design which is not compatible with Material 3 color system (ex.
/// color scheme generated by [ColorScheme.fromSeed] generates colors that are
/// too different from your own design system) but you still want to use
/// Material 3 [OutlinedButton] design.
///
/// While more verbose than [OutlinedButton.styleFrom] it allows much more
/// easily create const [ButtonStyle].
///
/// See also:
///
/// * [OutlinedButton.styleFrom], a static convenience method that constructs a
/// outlined button [ButtonStyle] given simple values.
/// * Outlined button Material 3 specs:
/// <https://m3.material.io/components/buttons/specs#de72d8b1-ba16-4cd7-989e-e2ad3293cf63>
/// * Outlined button Material 3 guidelines:
/// <https://m3.material.io/components/buttons/guidelines#3742b09f-c224-43e0-a83e-541bd29d0f05>
/// * Material 3 buttons accessibility:
/// <https://m3.material.io/components/buttons/accessibility>
@immutable
class M3OutlinedButtonStyle extends ButtonStyle {
  /// Creates [ButtonStyle] for [OutlinedButton] with const constructor.
  ///
  /// Both [foregroundColor] and [overlayColor] should use
  /// [ColorScheme.primary] value.
  const M3OutlinedButtonStyle({
    ForegroundStateOverlay? foregroundColor,
    InteractionStatesOverlay? overlayColor,
    OutlineStateOverlay? side,
    BackgroundStateOverlay? backgroundColor,
    OutlinedBorder? shape,
    TextStyle? textStyle,
    EdgeInsetsGeometry? padding = layoutPadding,
    Size? minimumSize = const Size(64, 40),
    super.mouseCursor,
    super.visualDensity,
    super.tapTargetSize,
    super.splashFactory = InkSparkle.splashFactory,
  })  : _shape = shape,
        _textStyle = textStyle,
        _padding = padding,
        _minimumSize = minimumSize,
        super(
          animationDuration: kThemeChangeDuration,
          enableFeedback: true,
          elevation: const MaterialStatePropertyAll(0),
          alignment: Alignment.center,
          overlayColor: overlayColor,
          foregroundColor: foregroundColor,
          maximumSize: const MaterialStatePropertyAll(Size.infinite),
          side: side,
          backgroundColor: backgroundColor,
        );

  /// Padding values for [OutlinedButton] taken from
  /// <https://m3.material.io/components/buttons/specs#a3fc4f33-447f-45e0-93a8-35d538e0faa6>
  ///
  /// `_TokenDefaultsM3` does not have correct values.
  static const EdgeInsets layoutPadding = EdgeInsets.symmetric(horizontal: 24);

  /// Padding values for [OutlinedButton.icon] taken from
  /// <https://m3.material.io/components/buttons/specs#a3fc4f33-447f-45e0-93a8-35d538e0faa6>
  ///
  /// `_TokenDefaultsM3` does not have correct values.
  static const EdgeInsets iconLayoutPadding =
      EdgeInsets.only(left: 16, right: 24);

  // Private fields for creating [ButtonStyleButton.allOrNull].
  final OutlinedBorder? _shape;
  final TextStyle? _textStyle;
  final EdgeInsetsGeometry? _padding;
  final Size? _minimumSize;

  @override
  MaterialStateProperty<OutlinedBorder>? get shape =>
      ButtonStyleButton.allOrNull(_shape);

  @override
  MaterialStateProperty<TextStyle>? get textStyle =>
      ButtonStyleButton.allOrNull(_textStyle);

  @override
  MaterialStateProperty<EdgeInsetsGeometry>? get padding =>
      ButtonStyleButton.allOrNull(_padding);

  @override
  MaterialStateProperty<Size?>? get minimumSize =>
      ButtonStyleButton.allOrNull(_minimumSize);
}
