import 'package:flutter/material.dart';

import '../interaction_states.dart';

/// A helper class that allows creating Material 3 [ButtonStyle] without
/// providing [BuildContext] for accessing [ColorScheme] via
/// `Theme.of(context).colorScheme` while also reusing private values from
/// [OutlinedButton]'s `_TokenDefaultsM3`.
///
///
/// [M3ElevatedButtonStyle] is best suited for situations when your app has
/// custom design which is not compatible with Material 3 color system (ex.
/// color scheme generated by [ColorScheme.fromSeed] generates colors that are
/// too different from your own design system) but you still want to use
/// Material 3 [ElevatedButton] design.
///
/// While more verbose than [ElevatedButton.styleFrom] it allows much more
/// easily create const [ButtonStyle].
///
/// See also:
///
/// * [ElevatedButton.styleFrom], a static convenience method that constructs a
/// outlined button [ButtonStyle] given simple values.
/// * Elevated button Material 3 specs:
/// <https://m3.material.io/components/buttons/specs#0eea2a85-b4d7-4c74-b08e-98410b9412c7>
/// * Elevated button Material 3 guidelines:
/// <https://m3.material.io/components/buttons/guidelines#4e89da4d-a8fa-4e20-bb8d-b8a93eff3e3e>
/// * Material 3 buttons accessibility:
/// <https://m3.material.io/components/buttons/accessibility>
@immutable
class M3ElevatedButtonStyle extends ButtonStyle {
  /// Creates [ButtonStyle] for [OutlinedButton] with const constructor.
  ///
  /// Both [foregroundColor] and [overlayColor] should use
  /// [ColorScheme.primary] value.
  /// [backgroundColor] should use [ColorScheme.surface] value.
  const M3ElevatedButtonStyle({
    ForegroundStateOverlay? foregroundColor,
    InteractionStatesOverlay? overlayColor,
    BackgroundStateOverlay? backgroundColor,
    OutlinedBorder? shape,
    TextStyle? textStyle,
    EdgeInsetsGeometry? padding = layoutPadding,
    Size? minimumSize = const Size(64, 40),
    Color? surfaceTintColor,
    Color? shadowColor,
    this.isFilledButton = false,
    super.mouseCursor,
    super.visualDensity,
    super.tapTargetSize,
    super.splashFactory = InkSparkle.splashFactory,
  })  : _shape = shape,
        _textStyle = textStyle,
        _padding = padding,
        _minimumSize = minimumSize,
        _surfaceTint = surfaceTintColor,
        _shadowColor = shadowColor,
        super(
          animationDuration: kThemeChangeDuration,
          enableFeedback: true,
          alignment: Alignment.center,
          overlayColor: overlayColor,
          foregroundColor: foregroundColor,
          maximumSize: const MaterialStatePropertyAll(Size.infinite),
          backgroundColor: backgroundColor,
        );

  /// Padding values for [ElevatedButton] taken from
  /// <https://m3.material.io/components/buttons/specs#1f1b4b99-9a1c-4f7e-b713-e9c286c771e0>
  ///
  /// `_TokenDefaultsM3` does not have correct values.
  static const EdgeInsets layoutPadding = EdgeInsets.symmetric(horizontal: 24);

  /// Padding values for [ElevatedButton.icon] taken from
  /// <https://m3.material.io/components/buttons/specs#1f1b4b99-9a1c-4f7e-b713-e9c286c771e0>
  ///
  /// `_TokenDefaultsM3` does not have correct values.
  static const EdgeInsets iconLayoutPadding =
      EdgeInsets.only(left: 16, right: 24);

  /// Whether this button is of type `FilledButton` or `FilledTonalButton`.
  ///
  /// Those buttons use different elevation states values.
  final bool isFilledButton;

  // Private fields for creating [ButtonStyleButton.allOrNull].
  final OutlinedBorder? _shape;
  final TextStyle? _textStyle;
  final EdgeInsetsGeometry? _padding;
  final Size? _minimumSize;
  final Color? _surfaceTint;
  final Color? _shadowColor;

  @override
  MaterialStateProperty<OutlinedBorder>? get shape =>
      ButtonStyleButton.allOrNull(_shape);

  @override
  MaterialStateProperty<TextStyle>? get textStyle =>
      ButtonStyleButton.allOrNull(_textStyle);

  @override
  MaterialStateProperty<EdgeInsetsGeometry>? get padding =>
      ButtonStyleButton.allOrNull(_padding);

  @override
  MaterialStateProperty<Size?>? get minimumSize =>
      ButtonStyleButton.allOrNull(_minimumSize);

  @override
  MaterialStateProperty<Color>? get shadowColor =>
      ButtonStyleButton.allOrNull<Color>(_shadowColor);

  @override
  MaterialStateProperty<Color>? get surfaceTintColor =>
      ButtonStyleButton.allOrNull<Color>(_surfaceTint);

  @override
  MaterialStateProperty<double>? get elevation =>
      isFilledButton ? const FilledButtonElevation() : null;
}
